{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","href","this","props","business","yelpUrl","target","rel","src","imageSrc","alt","name","address1","city","state","zipCode","coordinatesLink","category","rating","reviewCount","price","transactions","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOptions","sortByOption","setState","event","value","preventDefault","searchYelp","console","log","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","placeholder","onChange","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address","display_address","coordinates","latitude","longitude","coordinatesLong","zip_code","categories","title","phone","display_phone","review_count","url","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5ac2e21d.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\nclass Business extends React.Component {\n    render() {\n        return (\n        <div className=\"Business\">\n            \n            <div className=\"image-container\">\n            <a href={this.props.business.yelpUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                <img src={this.props.business.imageSrc} alt={this.props.business.name}/>\n                </a>\n            </div>\n            <div className=\"business-card\">\n            <h2>    \n                {this.props.business.name}\n            </h2>\n            <div className=\"Business-information\">\n                <div className=\"Business-address\">\n                    <p>{this.props.business.address1}</p>\n                    <p>{this.props.business.city}</p>\n                    <p>{this.props.business.state} {this.props.business.zipCode}</p>\n                    <p><a href={this.props.business.coordinatesLink} target=\"_blank\" rel=\"noopener noreferrer\">Find it!</a></p>\n                </div>\n                <div className=\"Business-reviews\">\n                    <h3>{this.props.business.category}</h3>\n                    <h3 className=\"rating\">{this.props.business.rating} stars</h3>\n                    <p>{this.props.business.reviewCount} reviews</p>\n                    <p>Price: {this.props.business.price}</p>\n                    <p>{this.props.business.transactions}</p>\n                </div>\n            </div>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default Business;\n","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component {\n    render(){\n        return (\n            <div className=\"BusinessList\">\n                {\n                    this.props.businesses.map( (business) => {\n                       return <Business key={business.id} business={business} />;\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nexport default BusinessList;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            term: '', \n            location: '',\n            sortBy: 'best_match'\n        };\n\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.handleLocationChange = this.handleLocationChange.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n\n        this.sortByOptions = {\n            'Best Match': 'best_match',\n            'Highest Rated': 'rating',\n            'Most Reviewed': 'review_count'\n        \n        };\n    }\n\n    getSortByClass(sortByOption) {\n        if(this.state.sortBy === sortByOption){\n            return 'active';\n        } else {\n            return ' ';\n        }\n    }\n\n    handleSortByChange(sortByOption) {\n        this.setState({\n            sortBy: sortByOption\n        });\n    }\n\n    handleTermChange(event) {\n        this.setState({\n            term: event.target.value\n        });\n    }\n\n    handleLocationChange(event) {\n        this.setState({\n            location: event.target.value\n        });\n    }   \n\n    handleSearch(event) {\n        event.preventDefault();\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n    }\n\n    handleSearchEnter(event) {\n        if (event.key === 'Enter') {\n            console.log(event.key);\n            event.preventDefault();\n            this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);    \n        }\n       }\n\n    renderSortByOptions() {\n        return Object.keys(this.sortByOptions).map(sortByOption => {\n            let sortByOptionValue = this.sortByOptions[sortByOption];\n            return <li key={sortByOptionValue} \n                    className={this.getSortByClass(sortByOptionValue)} \n                    onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>\n                    {sortByOption}\n                    </li>;\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <div className=\"SearchBar-sort-options\">\n                    <ul>\n                        {this.renderSortByOptions()}\n                    </ul>\n                </div>\n                <div className=\"SearchBar-fields\">\n                    <input placeholder=\"Find Food\" onChange={this.handleTermChange} />\n                    <input placeholder=\"Where?\" onChange={this.handleLocationChange} />\n                </div>\n                <div className=\"SearchBar-submit\">\n                    <button onClick={this.handleSearch}>Let&rsquo;s Go!</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;\n","const apiKey = 'vyJgNtJ2sEp1P11F1vA1jTyEAbTahhzhWagosXEZfqPIC2RWTmK1NJ1FWWhVSs4F5eQWS6KqdjzMHNUaNnVAUSW8nyGA-yOVNRWvqmkNEQc5tQN3EggNjH9wyUU0X3Yx';\nconst mapUrl = `https://www.google.com/maps/search/?api=1&query=`;\nconst Yelp = {\n    search(term, location, sortBy){\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, \n        {\n            headers: {\n                Authorization: `Bearer ${apiKey}`\n            }\n        }).then( response => response.json() ).then( (jsonResponse) => {\n            if(jsonResponse.businesses){\n                return jsonResponse.businesses.map(business => {\n                    return {\n                        id: business.id,\n                        imageSrc: business.image_url,\n                        name: business.name,\n                        address: business.location.display_address[0],\n                        address1: business.location.address1,\n                        city: business.location.city,\n                        coordinatesLink: `${mapUrl}` + business.coordinates.latitude + ',' + business.coordinates.longitude,\n                        coordinatesLong: business.coordinates.longitude,\n                        state: business.location.state,\n                        zipCode: business.location.zip_code,\n                        category: business.categories[0].title,\n                        phone: business.display_phone,\n                        price: business.price,\n                        rating: business.rating,\n                        reviewCount: business.review_count,\n                        transactions: business.transactions[0],\n                        yelpUrl: business.url\n                    };\n                });\n            } \n        } );\n    }\n}\n\nexport default Yelp;\n","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList'\nimport SearchBar from '../SearchBar/SearchBar'\nimport Yelp from '../../util/Yelp'\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        businesses: []\n    };\n    // this.searchYelp.bind(this);\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    console.log(`Searching Yelp with ${term}, ${location}, ${sortBy}`);\n    \n    Yelp.search(term, location, sortBy).then( (businesses) => {\n      this.setState({\n        businesses: businesses\n      })\n    } );\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n      <h1>Food / Find</h1>\n      <SearchBar searchYelp={this.searchYelp} />\n      <BusinessList businesses={this.state.businesses} />\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}